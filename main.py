import sqlite3
import string
import os, time, random
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import db

token = "5465124244:AAFuk5Fjoew1nENmPpOZ_pwxTZC4q26ZaZg" # –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
admin_id = 5581757944 # ID –∞–¥–º–∏–Ω–∞
admin_link = "@d9rkgr9m_adm" # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å @ –≤ –Ω–∞—á–∞–ª–µ
link = "DarkGram_Robot" # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ –±–µ–∑ @ –≤ –Ω–∞—á–∞–ª–µ

bot = Bot(token=token)

dp = Dispatcher(bot, storage=MemoryStorage())

class States(StatesGroup):
	menu = State()
	pay = State()
	pay_sum = State()

#------------------------------
def start(user_id):
	_data = db.get_info(user_id)
	return f"""–ü—Ä–∏–≤–µ—Ç, {_data[2]}!

DarkGram - —Ä–∞–∑–≤–ª–µ–∫–∞–∏–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –±—ã—Å—Ç—Ä–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –ø–æ–∏—Å–∫–µ

–¢–µ–ø–µ—Ä—å –Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∏–ª–∏ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞

P.S. –í—Å–µ–º –º–æ–¥–µ–ª—è–º –Ω–∞ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –µ—Å—Ç—å 18 –ª–µ—Ç. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ —á—Ç–æ —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.

"""

def subscribe():
	return f"""–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã

https://t.me/+gLZ0iLEH0klmMGly
https://t.me/+PcBFs3PK3JszZmM1
https://t.me/summerhahh

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ	
"""

def premium1():
	return f"""–ß—Ç–æ –¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞?

-C–Ω–∏–º–∞–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç.–µ. –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞)

–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
"""

def pay1():
	return f"""–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É

https://qiwi.com/payment/form/99?extra%5B%27account%27%5D={db.get_settings()[1]}&amountInteger=150&amountFraction=0&extra%5B%27comment%27%5D=pr2382d&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–æ–º —Å —á–µ–∫–æ–º - @d9rkgr9m_adm
"""

def profile(user_id):
	_data = db.get_info(user_id)
	return f"""–ü—Ä–∏–≤–µ—Ç, {_data[2]}! 
	
üë§ –í–∞—à ID: {_data[1]}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {_data[3]}
üíµ –ë–∞–ª–∞–Ω—Å: {_data[5]}

–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –ø–æ {db.get_settings()[5]} –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!
üë§ *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {db.get_refs(user_id)}
t.me/{link}?start={user_id}

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_link} 
"""

def premium():
	keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(KeyboardButton('üíµ –û–ø–ª–∞—Ç–∏—Çb'))
	keyboard.add(KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥'))
	return keyboard

def watch():
	keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(KeyboardButton('üñº –í–∏–¥–µ–æ'), KeyboardButton('üñº –§–æ—Ç–æ'))
	keyboard.add(KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥'))
	return keyboard

def reply_keyboard():
	keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(KeyboardButton('üñº –°–º–æ—Ç—Ä–µ—Ç—å'))
	keyboard.add(KeyboardButton('üíº –ü—Ä–æ—Ñ–∏–ª—å'))
	keyboard.add(KeyboardButton('üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'), KeyboardButton('üíµ Premium –ø–æ–¥–ø–∏—Å–∫–∞'))
	return keyboard

def just_back():
	keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
	keyboard.add(KeyboardButton('‚Ü™Ô∏è –ù–∞–∑–∞–¥'))
	return keyboard

def inline_keyboard(pay_sum, comment, code):
	link = f"https://qiwi.com/payment/form/{code}?extra%5B%27account%27%5D={db.get_settings()[1]}&amountInteger={pay_sum}&amountFraction=0&extra%5B%27comment%27%5D={comment}&currency=643&blocked%5B0%5D=sum&blocked%5B1%5D=comment&blocked%5B2%5D=account"
	keyboard = InlineKeyboardMarkup()
	keyboard.add(InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∏—Ç—å", url=link))
	return keyboard

def random_order():
	return f"{random.randint(44,77)}{random.choice(string.ascii_letters)}{random.choice(string.ascii_letters)}{random.randint(371,984)}{random.choice(string.ascii_letters)}{random.randint(11,24)}"

def check(chat_member):
	if chat_member['status'] != 'left':
		return True
	else:
		return False

#------------------------------

# –ú–µ–Ω—é
@dp.message_handler(text=["‚Ü™Ô∏è –ù–∞–∑–∞–¥"], state="*")
@dp.message_handler(commands=["start"], state="*")
async def menu(message: types.Message, state: FSMContext):
	_user_id = message.chat.id
	_username = message.chat.username
	if not (db.get_users_exist(message.chat.id)):
		if (message.text != "‚Ü™Ô∏è –ù–∞–∑–∞–¥" and message.text.startswith("/start ")):
			_ref = message.text.replace("/start ", "")
			if (int(message.chat.id) != int(_ref)):
				db.add_user_to_db(message.chat.id, message.chat.username, _ref, db.get_settings()[4])
				db.set_balance(_ref, db.get_balance(_ref) + db.get_settings()[5])
				await bot.send_message(chat_id = admin_id, text = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {_user_id} (@{_username})\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {_ref}")
				await bot.send_message(chat_id=_ref, text=f"*–ö—Ç–æ-—Ç–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!*\n–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {db.get_settings()[5]}", parse_mode='Markdown')
			else:
				db.add_user_to_db(message.chat.id, message.chat.username, 0, db.get_settings()[4])
				await bot.send_message(chat_id = admin_id, text = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {_user_id} (@{_username})")
		else:
			db.add_user_to_db(message.chat.id, message.chat.username, 0, db.get_settings()[4])
			await bot.send_message(chat_id = admin_id, text = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {_user_id} (@{_username})")
	db.update_nickname(_user_id, _username)
	await message.answer(start(_user_id), reply_markup = reply_keyboard(), parse_mode="HTML")
	await States.menu.set()

@dp.message_handler(text=["üñº –°–º–æ—Ç—Ä–µ—Ç—å"], state=States.menu)
async def menu(message: types.Message, state: FSMContext):
	if check(await bot.get_chat_member(chat_id=-1001736543180, user_id=message.from_user.id)):
		if check(await bot.get_chat_member(chat_id=-1001578489892, user_id=message.from_user.id)):
			if check(await bot.get_chat_member(chat_id=-1001798848878, user_id=message.from_user.id)):
				await message.answer(f"üñº –°–º–æ—Ç—Ä–µ—Ç—å", reply_markup = watch(), parse_mode="Markdown")
		else:
			await message.answer(subscribe(), parse_mode = 'HTML')
	else:
		await message.answer(subscribe(), parse_mode = 'HTML')

@dp.message_handler(text=["üíº –ü—Ä–æ—Ñ–∏–ª—å"], state=States.menu)
async def menu(message: types.Message, state: FSMContext):
	_user_id = message.chat.id
	_username = message.chat.username
	await message.answer(profile(_user_id), reply_markup = reply_keyboard(), parse_mode="HTML")

@dp.message_handler(text=["üíµ Premium –ø–æ–¥–ø–∏—Å–∫–∞"], state=States.menu)
async def menu(message: types.Message, state: FSMContext):
	await message.answer(premium1(), reply_markup = premium(), parse_mode="HTML")

@dp.message_handler(text=["üíµ –û–ø–ª–∞—Ç–∏—Çb"], state=States.menu)
async def menu(message: types.Message, state: FSMContext):
	await message.answer(pay1(), reply_markup = just_back(), parse_mode="HTML")

@dp.message_handler(text=["üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"], state=States.menu)
async def menu(message: types.Message, state: FSMContext):
	_user_id = message.chat.id
	_username = message.chat.username
	await message.answer(f"üíµ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è*", reply_markup = just_back(), parse_mode="Markdown")
	await States.pay.set()

@dp.message_handler(state=States.pay)
async def menu(message: types.Message, state: FSMContext):
	if (message.text.isdigit()):
		if (int(message.text) >= 10 and int(message.text) <= 500):
			_code = 99 if db.get_settings()[1].isdigit() else 99999
			_user_id = message.chat.id
			_username = message.chat.username
			_random = random_order()
			await message.answer(f"""
üìà –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID{_random}
–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É —Å —á–µ–∫–æ–º –æ–ø–ª–∞—Ç—ã - @d9rkgr9m_adm
""", 
reply_markup = inline_keyboard(message.text, _random, _code), parse_mode="Markdown")
			await States.pay_sum.set()
			await States.menu.set()
		else:
			await message.answer(f"*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç 10‚ÇΩ –¥–æ 500‚ÇΩ*", reply_markup = just_back(), parse_mode="Markdown")
	else:
		await message.answer(f"*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º*", reply_markup = just_back(), parse_mode="Markdown")

@dp.message_handler(text=["üñº –í–∏–¥–µ–æ"], state="*")
async def video(message: types.Message, state: FSMContext):
	_user_id = message.chat.id
	_balance = db.get_balance(_user_id)
	if (int(_balance) >= db.get_settings()[2]):
		db.set_balance(_user_id, int(_balance) - db.get_settings()[2])
		_dir = f"{os.getcwd()}/videos"
		list_videos = os.listdir(_dir)
		random_video = random.choice(list(list_videos))
		with open(f"videos/{random_video}", 'rb') as video:
			await bot.send_video(chat_id = message.chat.id, video = video, reply_markup = reply_keyboard())
	else:
		await message.answer(f"""*–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!*
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:
t.me/{link}?start={_user_id}
"""
, reply_markup = reply_keyboard(), parse_mode="HTML")
	await States.menu.set()

@dp.message_handler(text=["üñº –§–æ—Ç–æ"], state="*")
async def photo(message: types.Message, state: FSMContext):
	_user_id = message.chat.id
	_balance = db.get_balance(_user_id)
	if (int(_balance) >= db.get_settings()[3]):
		db.set_balance(_user_id, int(_balance) - db.get_settings()[3])
		_dir = f"{os.getcwd()}/photos"
		list_photos = os.listdir(_dir)
		random_photo = random.choice(list(list_photos))
		with open(f"photos/{random_photo}", 'rb') as photo:
			await bot.send_photo(chat_id = message.chat.id, photo = photo, reply_markup = reply_keyboard())
	else:
		await message.answer(f"""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!
–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ:
t.me/{link}?start={_user_id}
"""
, reply_markup = reply_keyboard(), parse_mode="HTML")
	await States.menu.set()

#------------------------------

@dp.message_handler(commands="admin", state="*")
async def admin_menu(message: types.Message, state: FSMContext):
	if (message.chat.id == admin_id):
		_settings = db.get_settings()
		await message.answer(f"""üíº *–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {len(db.get_all_users())}
üë§ –ó–∞ –Ω–µ–¥–µ–ª—é: {len(db.get_week_users())}
üìù *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*
Qiwi - {_settings[1]}
–¶–µ–Ω–∞ –≤–∏–¥–µ–æ - {_settings[2]}
–¶–µ–Ω–∞ —Ñ–æ—Ç–æ - {_settings[3]}
–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å - {_settings[4]}
–ë–æ–Ω—É—Å —Ä–µ—Ñ–∫–∏ - {_settings[5]}
*/info* - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
""", parse_mode="Markdown")

@dp.message_handler(commands=["qiwi", "video", "photo", "stbal", "bonus"], state="*")
async def admin_menu(message: types.Message, state: FSMContext):
	if (message.chat.id == admin_id):
		if (message.text.count(" ") > 0):
			_data = message.text.split(" ")
			_command = _data[0][1:]
			_value = _data[1]
			if (_value.isdigit() or _command == "qiwi"):
				db.update_settings(_command, _value)
				await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ {_command} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {_value}", parse_mode="Markdown")
			else:
				await bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
		else:
			await bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(commands="info", state="*")
async def admin_menu(message: types.Message, state: FSMContext):
	if (message.chat.id == admin_id):
		await message.answer(f'''üíº *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞*
*/info* - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
*/send —Ç–µ—Å—Ç* - –†–∞—Å—Å—ã–ª–∫–∞
*/pay ID 123* - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ ID
üìù *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫*
*/qiwi 89876543210* - –Ω–æ–º–µ—Ä Qiwi
*/video 123* - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ
*/photo 123* - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ
*/stbal 123* - –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
*/bonus 123* - –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
''', parse_mode="Markdown")

#------------------------------

@dp.message_handler(state="*")
async def admin_mail(message: types.Message, state: FSMContext):
	if (message.chat.id == admin_id):
		if (message.text.startswith("/send ")):
			text = message.text.replace("/send ", "")
			users = db.get_all_users()
			a = 0
			for user in users:
				try:
					await bot.send_message(chat_id=user[0], text=text, parse_mode="Markdown")
					a += 1
					time.sleep(0.1)
				except:
					pass
			await bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–ü–æ–ª—É—á–∏–ª–∏ {a} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		if (message.text.startswith("/pay ")):
			_data = message.text.split(" ")
			if (len(_data) > 2):
				_ID = _data[1]
				_sum = _data[2]
				if (_ID.isdigit() and (_sum.isdigit()) or _sum.replace("-", "").isdigit()):
					if (db.get_users_exist(_ID)):
						db.set_balance(_ID, db.get_balance(_ID) + int(_sum))
						_info = db.get_info(_ID)
						await bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å {_ID} (@{_info[2]}) –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {_sum}")
					else:
						await bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
				else:
					await bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
			else:
				await bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

#------------------------------

if __name__ == "__main__":
	db.check_db()
	executor.start_polling(dp, skip_updates=True)
